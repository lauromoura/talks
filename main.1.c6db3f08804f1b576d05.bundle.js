(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{134:function(i,e,n){n(135),i.exports=n(342)},337:function(i,e,n){var l={"./talk.md":338};function a(i){var e=o(i);return n(e)}function o(i){if(!n.o(l,i)){var e=new Error("Cannot find module '"+i+"'");throw e.code="MODULE_NOT_FOUND",e}return l[i]}a.keys=function(){return Object.keys(l)},a.resolve=o,i.exports=a,a.id=337},338:function(i,e,n){i.exports='<h2 id="webassembly">WebAssembly</h2>\n<p>E o que Python tem a ver com isso</p>\n<hr>\n<h2 id="sumário">Sumário</h2>\n\x3c!-- contents --\x3e\n\n<hr>\n<h2 id="quem-sou">Quem sou</h2>\n<ul>\n<li>Desenvolvedor de software desde 2008</li>\n<li><code>[&#39;Recife&#39;].append(&#39;Florianópolis&#39;)</code></li>\n<li>2008~15 Instituto Nokia de Tecnologia</li>\n<li>2015~ Expertise Solutions</li>\n<li>Projetos:<ul>\n<li>PySide</li>\n<li>Webkit</li>\n<li>EFL (JS, C#)</li>\n</ul>\n</li>\n<li>Contato:<ul>\n<li>Twitter: <a href="https://twitter.com/lauromoura">@lauromoura</a></li>\n<li>Github: <a href="https://github.com/lauromoura">lauromoura</a></li>\n<li>email: lauromoura at gmail.com</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: Javascript (e seus problemas) --\x3e\n\n<h2 id="no-começo-era-o-javascript">No começo, era o javascript</h2>\n<ul>\n<li><a href="http://speakingjs.com/es5/ch04.html">Hack de 10 dias em 1995</a></li>\n<li>Que virou um dos pilares da web<ul>\n<li>Junto com HTML e CSS</li>\n</ul>\n</li>\n<li>Alto nível, prototypes, sintaxe que lembra Java/C e afins</li>\n<li>Principais implementações<ul>\n<li>V8 - Blink (Chrome, Edge) e Node</li>\n<li>JavaScriptCore - Webkit (Safari)</li>\n<li>Spidermonkey - Gecko (Firefox)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="problemas">Problemas...</h2>\n<img src="'+n(339)+'" />\n\n<hr>\n<h2 id="problemas-1">Problemas</h2>\n<ul>\n<li>Array(16).join(&quot;LoL&quot; - 2) + &quot; Batman!&quot;</li>\n<li>Ficar preso a uma única linguagem<ul>\n<li><a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js">Transpilers e afins</a></li>\n<li>Ainda assim, é Javascript</li>\n</ul>\n</li>\n<li><a href="https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4">TOO MUCH JS</a></li>\n<li>Alto nível demais<ul>\n<li>Problema ao usar JS normal como &quot;assembly&quot;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="problemas-2">Problemas</h2>\n<pre><code class="language-js">!function(e,t){&quot;use strict&quot;;&quot;object&quot;==typeof\nmodule&amp;&amp;&quot;object&quot;==typeofmodule.exports?\nmodule.exports=e.document?t(e,!0):function(e){\nif(!e.document)throw new Error(&quot;jQuery\nrequires a window with a document&quot;);\nreturn t(e)}:t(e)}(&quot;undefined&quot;!=typeof\nwindow?window:this,function(e,t){&quot;use strict&quot;;\nvar n=[],r=e.document,i=Object.getPrototypeOf,\no=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},\n...</code></pre>\n<hr>\n<h2 id="porque-é-tão-pesado">Porque é tão pesado?</h2>\n<ul>\n<li><a href="https://blog.sessionstack.com/how-javascript-works-a-comparison-with-webassembly-why-in-certain-cases-its-better-to-use-it-d80945172d79">Javascript</a><ul>\n<li><a href="http://www.mattzeunert.com/2017/01/30/lazy-javascript-parsing-in-v8.html">Parsear</a></li>\n<li>Gerar bytecode</li>\n<li>Otimizar (JIT e afins)</li>\n<li>Re-Otimizar</li>\n<li>Rodar</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: Assembly na Web --\x3e\n\n<h2 id="assembly-na-web">&quot;Assembly&quot; na Web</h2>\n<hr>\n<h2 id="asmjs">asm.js</h2>\n<ul>\n<li><a href="http://asmjs.org/faq.html">Subset de Javascript</a></li>\n<li>Dicas para o interpretador do código que vai ser executado</li>\n<li>Permite otimizações mais certeiras e eficientes</li>\n</ul>\n<hr>\n<h2 id="asmjs---c">asm.js - C</h2>\n<pre><code class="language-c">size_t strlen(char *ptr) {\n  char *curr = ptr;\n  while (*curr != 0) {\n    curr++;\n  }\n  return (curr - ptr);\n}</code></pre>\n<hr>\n<h2 id="asmjs---js">asm.js - js</h2>\n<pre><code class="language-javascript">function strlen(ptr) {\n  ptr = ptr|0;\n  var curr = 0;\n  curr = ptr;\n  while (MEM8[curr]|0 != 0) {\n    curr = (curr + 1)|0;\n  }\n  return (curr - ptr)|0;\n}</code></pre>\n<hr>\n<h2 id="asmjs-1">asm.js</h2>\n<ul>\n<li>Ainda é javascript</li>\n<li>Ainda precisa ser parseado</li>\n<li>Pode ser melhorado</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: Webassembly --\x3e\n\n<h2 id="webassembly-1">WebAssembly</h2>\n<p>Assembly de verdade na web</p>\n<hr>\n<h2 id="webassembly-2">WebAssembly</h2>\n<p>&quot;Se WASM+WASI existissem em 2008, nós não precisaríamos\nter criado o Docker. Essa é a importância deles. Webassembly\nno servidor é o futuro da computação. Uma interface de sistemas\npadrão era o elo que faltava. Vamos torcer que WASI esteja a altura&quot;</p>\n<p><a href="https://twitter.com/solomonstre/status/1111004913222324225?lang=en">Solomon Hykes</a> - Criador do Docker</p>\n<hr>\n<h2 id="webassembly-3">WebAssembly</h2>\n<ul>\n<li>Formato binário<ul>\n<li>Não precisa ser parseado, apenas decodado</li>\n</ul>\n</li>\n<li>Tipos já determinados</li>\n<li>VM em pilha</li>\n<li><a href="https://caniuse.com/#feat=wasm">Suporte</a> a uma versão MVP nos 4 principais navegadores</li>\n<li>Gerenciamento manual de memória</li>\n</ul>\n<hr>\n<h2 id="webassembly-text-format">WebAssembly Text Format</h2>\n<pre><code class="language-wast">(module\n        (func $addTwo (param $lhs i32)\n                      (param $rhs i32)\n                      (result i32)\n                get_local $lhs\n                get_local $rhs\n                i32.add)\n        (export &quot;addTwo&quot; (func $addTwo))\n)</code></pre>\n<hr>\n<h2 id="processador-hipotético">Processador hipotético</h2>\n<ul>\n<li>8-bit bytes</li>\n<li>Memória byte a byte<ul>\n<li><a href="https://webassembly.github.io/spec/core/syntax/modules.html#syntax-mem">Linear</a></li>\n</ul>\n</li>\n<li>Suporte a acessos não-alinhados</li>\n<li>Inteiros de 32bits e opcionalmente 64bits</li>\n<li>IEEE 754-2008 para floats de 32 e 64bits<ul>\n<li>Mas sem exceções p/ NaN por enquanto</li>\n</ul>\n</li>\n<li>Little endian</li>\n<li>Ponteiros de 32bits<ul>\n<li>wasm64 suporta ponteiros de 64bits</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="syscalls-e-afins">Syscalls e afins</h2>\n<ul>\n<li>Não existem (ainda)<ul>\n<li><a href="https://github.com/WebAssembly/tool-conventions/issues/27">ABI em discussão</a></li>\n</ul>\n</li>\n<li>Atualmente cada host expõe uma API</li>\n<li><a href="https://wasi.dev/">WASI</a> a caminho<ul>\n<li>Arquivos e sistemas de arquivos</li>\n<li>Sockets</li>\n<li>Relógios</li>\n<li>Random</li>\n<li>Etc</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: emscripten - Uma ponte entre JS e Wasm --\x3e\n\n<h2 id="emscripten">emscripten</h2>\n<p>Uma ponte entre JS e C/C++</p>\n<hr>\n<h2 id="emscripten-1">emscripten</h2>\n<ul>\n<li>Backend LLVM</li>\n<li>clang como frontend</li>\n<li>Gera código asm.js ou WebAssembly</li>\n<li>Usos<ul>\n<li>Unity</li>\n<li><a href="http://s3.amazonaws.com/mozilla-games/tmp/2017-02-21-SunTemple/SunTemple.html">Unreal</a></li>\n<li>Qt</li>\n<li>DOSBox</li>\n<li><strong>Pyodide</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="emscripten-2">emscripten</h2>\n<img src="'+n(340)+'" />\n\n<hr>\n<h2 id="emscripten-runtime-environment">emscripten runtime environment</h2>\n<ul>\n<li><a href="https://github.com/emscripten-ports">Ports</a><ul>\n<li><a href="https://github.com/emscripten-ports/SDL2">SDL 2.0</a></li>\n<li>...</li>\n</ul>\n</li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/porting/multimedia_and_graphics/OpenGL-support.html">OpenGL ES 2.0</a></li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/porting/files/file_systems_overview.html#file-system-overview">Sistema de arquivos virtual</a><ul>\n<li>MEMFS</li>\n<li>IDBFS</li>\n<li>NODEFS (node.js)</li>\n</ul>\n</li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/porting/emscripten-runtime-environment.html#emscripten-memory-representation">Memória</a><ul>\n<li>Typed Array único</li>\n<li>Várias views (int, float, etc)</li>\n</ul>\n</li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/porting/pthreads.html">pthreads</a><ul>\n<li>asm.js</li>\n<li>Experimental em WebAssembly</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="emscripten---main-loop">emscripten - main loop</h2>\n<ul>\n<li><a href="https://flaviocopes.com/javascript-event-loop/">Não pode bloquear</a></li>\n<li>Função de iteração</li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/api_reference/emscripten.h.html#c.emscripten_set_main_loop_arg">emscripten_set_main_loop</a></li>\n<li><a href="https://kripken.github.io/emscripten-site/docs/api_reference/emscripten.h.html#c.emscripten_cancel_main_loop">emscripten_cancel_main_loop</a></li>\n</ul>\n\x3c!--\n---\n\n## emscripten - linkagem e memória\n\n- [Linkagem estática](https://github.com/kripken/emscripten/wiki/Linking)\n    - Como garantir de onde as libs vem?\n    - Módulos JS dinamicamente\n- [Problemas com acessos desalinhados](https://kripken.github.io/emscripten-site/docs/porting/Debugging.html#memory-alignment-issues)\n    - SAFE_HEAP para diagnóstico\n--\x3e\n<hr>\n\x3c!-- sectionTitle: Python no browser --\x3e\n\n<img src="'+n(341)+'" />\n\n<hr>\n<h2 id="python-no-frontend---transpilers">Python no frontend - Transpilers</h2>\n<ul>\n<li>Exemplo: Transcrypt (thanks, Berin)</li>\n<li>Compilam .py (ou parecido) para .js</li>\n<li>Pros:<ul>\n<li>Mais fácil integrar com libs JS</li>\n<li>Resultado da compilação de tamanho aceitável</li>\n<li>Execução relativamente rápida (comparado a JS)</li>\n</ul>\n</li>\n<li>Cons:<ul>\n<li>Complicado utilizar extensões Python nativas</li>\n<li>Nem sempre toda sintaxe de Python é suportada</li>\n<li>Compatibilidade entre tipos JS e Python em todo código</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="python-no-frontend---webasm">Python no frontend - Webasm</h2>\n<ul>\n<li>Exemplo: Pyodide</li>\n<li>Compilam um runtime em Webasm</li>\n<li>Pros:<ul>\n<li>Extensões nativas podem funcionar mais facilmente</li>\n<li>Usar o próprio CPython</li>\n<li>Compatibilidade entre tipos JS e Python apenas na API</li>\n</ul>\n</li>\n<li>Cons:<ul>\n<li>Tamanho: .wasm ainda estão bem grandes (MB&#39;s)<ul>\n<li>Mas podem ser cacheados pelo browser</li>\n</ul>\n</li>\n<li>Pode ser lento demais para alguns casos</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: Pyodide --\x3e\n\n<h2 id="pyodide">Pyodide</h2>\n<ul>\n<li>Port do CPython e stack científica</li>\n<li>Inspirado no <a href="https://alpha.iodide.io/">Iodide</a><ul>\n<li>Notebook-like project</li>\n</ul>\n</li>\n<li>numpy, pandas, matplotlib</li>\n<li>Experimental e planos p/ futuro<ul>\n<li>scipy</li>\n<li>scikit-image/learn</li>\n<li>Wheels Python &quot;puro sangue&quot; no PyPI</li>\n</ul>\n</li>\n<li><a href="https://alpha.iodide.io/notebooks/300/">Tour</a></li>\n</ul>\n<hr>\n<h2 id="pyodide-com-javascript">Pyodide com Javascript</h2>\n<pre><code class="language-javascript">languagePluginLoader.then(() =&gt; {\n    result = pyodide.runPython(&#39;import sys\\nsys.version&#39;);\n    console.log(result);\n});\n</code></pre>\n<hr>\n<h2 id="demos">Demos</h2>\n<hr>\n\x3c!-- sectionTitle: Hoje e amanhã --\x3e\n\n<h2 id="hoje-e-amanhã">Hoje e Amanhã</h2>\n<hr>\n<h2 id="hoje">Hoje</h2>\n<ul>\n<li>C/C++</li>\n<li><a href="https://rustwasm.github.io/book/">Rust</a></li>\n<li><a href="https://webassembly.org/docs/mvp/">MVP nos principais navegadores.</a><ul>\n<li>Módulo exportado</li>\n<li>Instruções</li>\n<li>Formato binário</li>\n<li>Formato textual</li>\n<li>Implementações nos browsers e outros ambientes</li>\n</ul>\n</li>\n<li><a href="https://github.com/iodide-project/pyodide">Python</a><ul>\n<li>Pyodide</li>\n</ul>\n</li>\n<li><a href="https://github.com/mbasso/awesome-wasm/blob/master/README.md#languages">Outras linguagens</a></li>\n</ul>\n<hr>\n<h2 id="amanhã-e-depois-de-amanhã">Amanhã (e depois de amanhã)</h2>\n<ul>\n<li><a href="https://webassembly.org/roadmap/">Roadmap WASM</a><ul>\n<li>Especificação</li>\n<li>Threads</li>\n<li>GC</li>\n<li>Exceções</li>\n<li>Host bindings (DOM/JS)</li>\n<li>Ferramentas</li>\n<li>Multi processos (fork &amp; cia)</li>\n<li>Mais controle de memória</li>\n<li>ABI</li>\n<li><a href="https://www.fastly.com/blog/hijacking-control-flow-webassembly">Segurança</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="amanhã-e-depois-de-amanhã-1">Amanhã (e depois de amanhã)</h2>\n<ul>\n<li>Pyodide<ul>\n<li>Extensões FORTRAN (BLAS/LAPACK)</li>\n<li>Diminuir tamanho dos downloads</li>\n<li>Async/threading</li>\n<li>PyGame? (emscripten já suporta SDL muito bem...)</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: Referências --\x3e\n\n<h2 id="links-úteis">Links úteis</h2>\n<ul>\n<li><a href="https://webassembly.org">Página oficial do Webassembly</a></li>\n<li><a href="https://mbebenita.github.io/WasmExplorer/">Wasm Explorer</a></li>\n<li><a href="https://github.com/mbasso/awesome-wasm">Awesome Wasm</a> - MUITOS links de projetos, ferramentas, etc</li>\n<li><a href="https://www.youtube.com/watch?v=pBYqen3B2gc">WebAssembly and the Death of Javascripat</a> - JS Monthy London - Março 2018</li>\n<li><a href="https://kripken.github.io/emscripten-site/index.html">Emscripten Github</a></li>\n<li><a href="https://hacks.mozilla.org/category/webassembly/">Post no blog da Mozilla sobre Wasm</a></li>\n<li><a href="https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/">Post no blog da Mozilla sobre Pyodide</a></li>\n<li><a href="https://github.com/iodide-project/pyodide">Pyodide Github</a></li>\n<li><a href="https://fosdem.org/2019/schedule/event/python_pyodide/">Apresentação sobre Pyodide</a> na FOSDEM 2019</li>\n</ul>\n<hr>\n<h2 id="perguntas-">Perguntas ?</h2>\n<hr>\n<h2 id="obrigado">Obrigado</h2>\n'},339:function(i,e,n){i.exports=n.p+"24e132cbbeaf08e4cecc878895e3f01b.png"},340:function(i,e,n){i.exports=n.p+"0c62e279077436571086dac3440e88b1.png"},341:function(i,e,n){i.exports=n.p+"de1a5562b8a8884356a8eec9e898c6d0.png"}},[[134,3,5]],[0]]);